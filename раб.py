import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from collections import OrderedDict
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class SeminarBot:
    def __init__(self):
        self.topics = {}  # {subject: {number: topic}}
        self.registrations = {}  # {subject: {number: (user_id, username, timestamp)}}
        self.current_subject = None
        self.waiting_for_topics = False

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–º–∏–Ω–∞—Ä—Å–∫–∏—Ö —Ç–µ–º.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/new_subject - –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º\n"
            "/view_topics - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–µ–º—ã\n"
            "/results - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )

    async def new_subject(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º"""
        self.waiting_for_topics = True
        self.current_subject = None
        self.registrations = {}
        
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Ç–µ–º—ã:",
            reply_markup=ReplyKeyboardRemove()
        )

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.waiting_for_topics = False
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.strip()
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        if self.waiting_for_topics and not self.current_subject:
            self.current_subject = text
            self.topics[self.current_subject] = {}
            self.registrations[self.current_subject] = {}
            self.waiting_for_topics = False
            
            await update.message.reply_text(
                f"–ü—Ä–µ–¥–º–µ—Ç '{text}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "1. –¢–µ–º–∞ 1\n"
                "2. –¢–µ–º–∞ 2\n"
                "3. –¢–µ–º–∞ 3\n"
                "..."
            )
            return

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
        elif self.current_subject and not self.topics[self.current_subject]:
            lines = text.split('\n')
            topics_dict = {}
            
            for line in lines:
                if '.' in line:
                    parts = line.split('.', 1)
                    try:
                        number = int(parts[0].strip())
                        topic = parts[1].strip()
                        topics_dict[number] = topic
                    except (ValueError, IndexError):
                        continue
            
            if topics_dict:
                self.topics[self.current_subject] = topics_dict
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º–∞–º–∏
                topics_text = f"–¢–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{self.current_subject}':\n\n"
                for num, topic in topics_dict.items():
                    topics_text += f"{num}. {topic}\n"
                
                topics_text += "\n–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π —Ç–µ–º—ã."
                
                await update.message.reply_text(topics_text)
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        if self.current_subject and self.topics.get(self.current_subject):
            try:
                topic_number = int(text)
                topics = self.topics[self.current_subject]
                
                if topic_number not in topics:
                    await update.message.reply_text("–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–º—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ —É–∂–µ —Ç–µ–º–∞
                if topic_number in self.registrations[self.current_subject]:
                    await update.message.reply_text("–≠—Ç–∞ —Ç–µ–º–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
                    return
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                timestamp = datetime.datetime.now()
                self.registrations[self.current_subject][topic_number] = (user_id, username, timestamp)
                
                await update.message.reply_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É {topic_number}: {topics[topic_number]}\n"
                    f"–í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞: {timestamp.strftime('%H:%M:%S')}"
                )
                
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã (—Ü–∏—Ñ—Ä—É).")

    async def view_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–µ–º—ã"""
        if not self.current_subject or not self.topics.get(self.current_subject):
            await update.message.reply_text("–¢–µ–º—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
            return
        
        topics_text = f"–¢–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{self.current_subject}':\n\n"
        for num, topic in self.topics[self.current_subject].items():
            status = "‚úÖ –ó–∞–Ω—è—Ç–∞" if num in self.registrations[self.current_subject] else "‚ùå –°–≤–æ–±–æ–¥–Ω–∞"
            topics_text += f"{num}. {topic} - {status}\n"
        
        await update.message.reply_text(topics_text)

    async def show_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        if not self.current_subject or not self.registrations.get(self.current_subject):
            await update.message.reply_text("–ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–ª —Ç–µ–º—ã.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–±–æ—Ä–∞
        sorted_registrations = sorted(
            self.registrations[self.current_subject].items(),
            key=lambda x: x[1][2]  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ timestamp
        )
        
        results_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{self.current_subject}':\n\n"
        
        for topic_num, (user_id, username, timestamp) in sorted_registrations:
            topic_name = self.topics[self.current_subject][topic_num]
            time_str = timestamp.strftime('%H:%M:%S')
            results_text += f"{topic_num}. {topic_name}\n   üë§ {username} (–≤ {time_str})\n\n"
        
        await update.message.reply_text(results_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    TOKEN = "8405347117:AAG7h0qxePyQ9mXW3z03DBYOEWafOVP3oBI"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = SeminarBot()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("new_subject", bot.new_subject))
    application.add_handler(CommandHandler("view_topics", bot.view_topics))
    application.add_handler(CommandHandler("results", bot.show_results))
    application.add_handler(CommandHandler("cancel", bot.cancel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
