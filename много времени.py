import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
from collections import OrderedDict
import datetime
import re
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
SETTING_TIME, CANCELING_REGISTRATION, WAITING_FOR_SUBJECT_TIME = range(3)

class SeminarBot:
    def __init__(self):
        self.topics = {}  # {subject: {number: topic}}
        self.registrations = {}  # {subject: {number: (user_id, username, timestamp)}}
        self.start_times = {}  # {subject: datetime} - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        self.current_subject = None
        self.waiting_for_topics = False
        self.admin_id = None  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–¥–µ—Å—å
        self.admin_id =1074399585   # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.distribution_tasks = {}  # {subject: task} - –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

    def is_admin(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id == self.admin_id

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–º–∏–Ω–∞—Ä—Å–∫–∏—Ö —Ç–µ–º.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/new_subject - –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º\n"
            "/view_topics - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–µ–º—ã\n"
            "/results - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
            "/set_subject_time - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
            "/cancel_registration - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
            "/list_subjects - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏—Ö –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )

    async def new_subject(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º"""
        self.waiting_for_topics = True
        self.current_subject = None
        
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Ç–µ–º—ã:",
            reply_markup=ReplyKeyboardRemove()
        )

    async def set_subject_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return ConversationHandler.END
        
        if not self.topics:
            await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return ConversationHandler.END
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        subjects_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n"
        for i, subject in enumerate(self.topics.keys(), 1):
            start_time = self.start_times.get(subject)
            time_info = f" - –Ω–∞—á–∞–ª–æ: {start_time.strftime('%d.%m.%Y %H:%M')}" if start_time else " - –≤—Ä–µ–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            subjects_text += f"{i}. {subject}{time_info}\n"
        
        subjects_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:"
        await update.message.reply_text(subjects_text)
        
        return WAITING_FOR_SUBJECT_TIME

    async def handle_subject_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        text = update.message.text.strip()
        subject = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É
        try:
            subject_num = int(text)
            subjects = list(self.topics.keys())
            if 1 <= subject_num <= len(subjects):
                subject = subjects[subject_num - 1]
        except ValueError:
            # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if text in self.topics:
                subject = text
        
        if not subject:
            await update.message.reply_text("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return WAITING_FOR_SUBJECT_TIME
        
        context.user_data['selected_subject'] = subject
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject}\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):"
        )
        return SETTING_TIME

    async def handle_set_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        time_input = update.message.text.strip()
        subject = context.user_data.get('selected_subject')
        
        if not subject:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_pattern = r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$'
        if not re.match(time_pattern, time_input):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
            return SETTING_TIME
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
        now = datetime.datetime.now()
        hours, minutes = map(int, time_input.split(':'))
        start_time = now.replace(hour=hours, minute=minutes, second=0, microsecond=0)
        
        if start_time < now:
            start_time = start_time + datetime.timedelta(days=1)
        
        self.start_times[subject] = start_time
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        await self.schedule_distribution_start(subject, start_time)
        
        await update.message.reply_text(
            f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {start_time.strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('selected_subject', None)
        return ConversationHandler.END

    async def schedule_distribution_start(self, subject, start_time):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if subject in self.distribution_tasks:
            self.distribution_tasks[subject].cancel()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        async def start_distribution():
            delay = (start_time - datetime.datetime.now()).total_seconds()
            if delay > 0:
                await asyncio.sleep(delay)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                logging.info(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject}' –Ω–∞—á–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        task = asyncio.create_task(start_distribution())
        self.distribution_tasks[subject] = task

    async def list_subjects(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏—Ö –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"""
        if not self.topics:
            await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return
        
        subjects_text = "üìö –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n\n"
        
        for subject in self.topics.keys():
            start_time = self.start_times.get(subject)
            if start_time:
                time_info = start_time.strftime('%d.%m.%Y %H:%M')
                if datetime.datetime.now() >= start_time:
                    status = "‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å"
                else:
                    time_left = start_time - datetime.datetime.now()
                    hours, remainder = divmod(time_left.total_seconds(), 3600)
                    minutes, seconds = divmod(remainder, 60)
                    status = f"‚è∞ –î–æ –Ω–∞—á–∞–ª–∞: {int(hours)}—á {int(minutes)}–º"
            else:
                time_info = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                status = "‚ùå –í—Ä–µ–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ"
            
            topics_count = len(self.topics[subject])
            reg_count = len(self.registrations.get(subject, {}))
            
            subjects_text += f"üìñ {subject}\n"
            subjects_text += f"   ‚è∞ –í—Ä–µ–º—è: {time_info}\n"
            subjects_text += f"   üìä –¢–µ–º—ã: {topics_count}, –í—ã–±—Ä–∞–Ω–æ: {reg_count}\n"
            subjects_text += f"   üö¶ –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        await update.message.reply_text(subjects_text)

    async def cancel_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return ConversationHandler.END
        
        if not self.topics:
            await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return ConversationHandler.END
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        subjects_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:\n\n"
        for i, subject in enumerate(self.topics.keys(), 1):
            subjects_text += f"{i}. {subject}\n"
        
        subjects_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:"
        await update.message.reply_text(subjects_text)
        
        context.user_data['cancel_action'] = 'select_subject'
        return CANCELING_REGISTRATION

    async def handle_cancel_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        text = update.message.text.strip()
        
        if context.user_data.get('cancel_action') == 'select_subject':
            # –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
            try:
                subject_num = int(text)
                subjects = list(self.topics.keys())
                if 1 <= subject_num <= len(subjects):
                    subject = subjects[subject_num - 1]
                    context.user_data['selected_subject'] = subject
                    context.user_data['cancel_action'] = 'select_topic'
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Ç–µ–º—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                    if subject in self.registrations and self.registrations[subject]:
                        occupied_text = f"–ó–∞–Ω—è—Ç—ã–µ —Ç–µ–º—ã –¥–ª—è '{subject}':\n\n"
                        for topic_num, (user_id, username, timestamp) in self.registrations[subject].items():
                            topic_name = self.topics[subject][topic_num]
                            occupied_text += f"{topic_num}. {topic_name} - @{username} ({timestamp.strftime('%H:%M:%S')})\n"
                        
                        occupied_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
                        await update.message.reply_text(occupied_text)
                    else:
                        await update.message.reply_text(f"–î–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject}' –Ω–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö —Ç–µ–º.")
                        return ConversationHandler.END
                else:
                    await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞.")
                    return CANCELING_REGISTRATION
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞.")
                return CANCELING_REGISTRATION
        
        elif context.user_data.get('cancel_action') == 'select_topic':
            # –í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã
            try:
                topic_num = int(text)
                subject = context.user_data.get('selected_subject')
                
                if subject not in self.registrations or topic_num not in self.registrations[subject]:
                    await update.message.reply_text("–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–º—ã –Ω–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return CANCELING_REGISTRATION
                
                # –£–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                user_id, username, timestamp = self.registrations[subject].pop(topic_num)
                topic_name = self.topics[subject][topic_num]
                
                await update.message.reply_text(
                    f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç–µ–º—É {topic_num}. {topic_name} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                    f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}"
                )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                context.user_data.pop('selected_subject', None)
                context.user_data.pop('cancel_action', None)
                
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã (—Ü–∏—Ñ—Ä—É).")
                return CANCELING_REGISTRATION
        
        return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.waiting_for_topics = False
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('selected_subject', None)
        context.user_data.pop('cancel_action', None)
        
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    def is_distribution_started(self, subject):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        if subject not in self.start_times:
            return True  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å—Ä–∞–∑—É
        
        now = datetime.datetime.now()
        return now >= self.start_times[subject]

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.strip()
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        if self.waiting_for_topics and not self.current_subject:
            self.current_subject = text
            self.topics[self.current_subject] = {}
            self.registrations[self.current_subject] = {}
            self.waiting_for_topics = False
            
            await update.message.reply_text(
                f"–ü—Ä–µ–¥–º–µ—Ç '{text}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "1. –¢–µ–º–∞ 1\n"
                "2. –¢–µ–º–∞ 2\n"
                "3. –¢–µ–º–∞ 3\n"
                "..."
            )
            return

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
        elif self.current_subject and not self.topics[self.current_subject]:
            lines = text.split('\n')
            topics_dict = {}
            
            for line in lines:
                if '.' in line:
                    parts = line.split('.', 1)
                    try:
                        number = int(parts[0].strip())
                        topic = parts[1].strip()
                        topics_dict[number] = topic
                    except (ValueError, IndexError):
                        continue
            
            if topics_dict:
                self.topics[self.current_subject] = topics_dict
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º–∞–º–∏
                topics_text = f"–¢–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{self.current_subject}':\n\n"
                for num, topic in topics_dict.items():
                    topics_text += f"{num}. {topic}\n"
                
                start_time = self.start_times.get(self.current_subject)
                if start_time:
                    topics_text += f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è: {start_time.strftime('%d.%m.%Y %H:%M')}"
                topics_text += "\n\n–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π —Ç–µ–º—ã."
                
                await update.message.reply_text(topics_text)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º
                self.current_subject = None
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–º—ã)
        # –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–ª—è –∫–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ç–µ–º–∞
        if text.isdigit():
            # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            selected_subject = None
            for subject in self.topics.keys():
                if self.is_distribution_started(subject):
                    selected_subject = subject
                    break
            
            if not selected_subject:
                await update.message.reply_text("–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ç–µ–º.")
                return
            
            try:
                topic_number = int(text)
                topics = self.topics[selected_subject]
                
                if topic_number not in topics:
                    await update.message.reply_text("–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–º—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ —É–∂–µ —Ç–µ–º–∞
                if topic_number in self.registrations[selected_subject]:
                    await update.message.reply_text("–≠—Ç–∞ —Ç–µ–º–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
                    return
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                timestamp = datetime.datetime.now()
                self.registrations[selected_subject][topic_number] = (user_id, username, timestamp)
                
                await update.message.reply_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É {topic_number}: {topics[topic_number]}\n"
                    f"–ü—Ä–µ–¥–º–µ—Ç: {selected_subject}\n"
                    f"–í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞: {timestamp.strftime('%H:%M:%S')}"
                )
                
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã (—Ü–∏—Ñ—Ä—É).")

    async def view_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–µ–º—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        if not self.topics:
            await update.message.reply_text("–¢–µ–º—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
            return
        
        for subject, topics_dict in self.topics.items():
            topics_text = f"–¢–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject}':\n\n"
            for num, topic in topics_dict.items():
                status = "‚úÖ –ó–∞–Ω—è—Ç–∞" if subject in self.registrations and num in self.registrations[subject] else "‚ùå –°–≤–æ–±–æ–¥–Ω–∞"
                topics_text += f"{num}. {topic} - {status}\n"
            
            start_time = self.start_times.get(subject)
            if start_time:
                if self.is_distribution_started(subject):
                    topics_text += f"\n‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å: {start_time.strftime('%d.%m.%Y %H:%M')}"
                else:
                    time_left = start_time - datetime.datetime.now()
                    hours, remainder = divmod(time_left.total_seconds(), 3600)
                    minutes, seconds = divmod(remainder, 60)
                    topics_text += f"\n‚è∞ –î–æ –Ω–∞—á–∞–ª–∞: {int(hours)}—á {int(minutes)}–º {int(seconds)}—Å"
            
            await update.message.reply_text(topics_text)

    async def show_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        if not any(self.registrations.values()):
            await update.message.reply_text("–ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–ª —Ç–µ–º—ã.")
            return
        
        for subject, registrations in self.registrations.items():
            if registrations:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–±–æ—Ä–∞
                sorted_registrations = sorted(
                    registrations.items(),
                    key=lambda x: x[1][2]  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ timestamp
                )
                
                results_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}':\n\n"
                
                for topic_num, (user_id, username, timestamp) in sorted_registrations:
                    topic_name = self.topics[subject][topic_num]
                    time_str = timestamp.strftime('%H:%M:%S')
                    results_text += f"{topic_num}. {topic_name}\n   üë§ {username} (–≤ {time_str})\n\n"
                
                await update.message.reply_text(results_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TOKEN = "8405347117:AAG7h0qxePyQ9mXW3z03DBYOEWafOVP3oBI"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = SeminarBot()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("set_subject_time", bot.set_subject_time),
            CommandHandler("cancel_registration", bot.cancel_registration)
        ],
        states={
            WAITING_FOR_SUBJECT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_subject_selection)],
            SETTING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_set_time)],
            CANCELING_REGISTRATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_cancel_registration)]
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("new_subject", bot.new_subject))
    application.add_handler(CommandHandler("view_topics", bot.view_topics))
    application.add_handler(CommandHandler("results", bot.show_results))
    application.add_handler(CommandHandler("list_subjects", bot.list_subjects))
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("cancel", bot.cancel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
