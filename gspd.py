import logging
import os
import asyncio
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
import datetime
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
(
    WAITING_SUBJECT_NAME, 
    WAITING_TOPICS_LIST,
    WAITING_FOR_SUBJECT_TIME,
    SETTING_DATE,
    SETTING_TIME,
    CANCELING_REGISTRATION,
    SELECTING_SUBJECT_FOR_REMOVAL,
    SELECTING_TOPIC_FOR_REMOVAL
) = range(8)

class SeminarBot:
    def __init__(self):
        self.topics = {}
        self.registrations = {}
        self.start_times = {}
        self.admin_id = 1074399585

    def is_admin(self, user_id):
        return user_id == self.admin_id

    def get_local_time(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ú–æ—Å–∫–≤—ã (UTC+3)"""
        utc_now = datetime.datetime.utcnow()
        msk_offset = datetime.timedelta(hours=3)
        return utc_now + msk_offset

    def format_time_left(self, time_left):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        days = time_left.days
        total_seconds = int(time_left.total_seconds())
        hours = (total_seconds // 3600) % 24
        minutes = (total_seconds // 60) % 60
        
        if days > 0:
            return f"{days} –¥–Ω. {hours} —á. {minutes} –º."
        elif hours > 0:
            return f"{hours} —á. {minutes} –º."
        else:
            return f"{minutes} –º."

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–º–∏–Ω–∞—Ä—Å–∫–∏—Ö —Ç–µ–º.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/new_subject - –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º\n"
            "/view_topics - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–µ–º—ã\n"
            "/results - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
            "/set_subject_time - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–∞–¥–º–∏–Ω)\n"
            "/cancel_registration - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä —Ç–µ–º—ã (–∞–¥–º–∏–Ω)\n"
            "/remove_user - —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —Ç–µ–º—ã (–∞–¥–º–∏–Ω)\n"
            "/list_subjects - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )

    async def new_subject(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return WAITING_SUBJECT_NAME

    async def handle_subject_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        subject_name = update.message.text.strip()
        
        if not subject_name:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return WAITING_SUBJECT_NAME
        
        context.user_data['current_subject'] = subject_name
        
        await update.message.reply_text(
            f"–ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–º:\n"
            "1. –¢–µ–º–∞ 1\n"
            "2. –¢–µ–º–∞ 2\n"
            "3. –¢–µ–º–∞ 3\n"
            "..."
        )
        return WAITING_TOPICS_LIST

    async def handle_topics_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        subject_name = context.user_data.get('current_subject')
        
        if not subject_name:
            await update.message.reply_text("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /new_subject")
            return ConversationHandler.END
        
        lines = text.split('\n')
        topics_dict = {}
        
        for line in lines:
            if '.' in line:
                parts = line.split('.', 1)
                try:
                    number = int(parts[0].strip())
                    topic = parts[1].strip()
                    if topic:
                        topics_dict[number] = topic
                except (ValueError, IndexError):
                    continue
        
        if topics_dict:
            self.topics[subject_name] = topics_dict
            self.registrations[subject_name] = {}
            
            topics_text = f"‚úÖ –¢–µ–º—ã –¥–ª—è '{subject_name}' –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n"
            for num, topic in sorted(topics_dict.items()):
                topics_text += f"{num}. {topic}\n"
            
            start_time = self.start_times.get(subject_name)
            if start_time:
                now = self.get_local_time()
                if now >= start_time:
                    topics_text += f"\n‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ê–ö–¢–ò–í–ù–û"
                else:
                    time_left = start_time - now
                    time_info = self.format_time_left(time_left)
                    topics_text += f"\n‚è∞ –ù–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑: {time_info}"
            else:
                topics_text += "\n‚è∞ –í—Ä–µ–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (/set_subject_time)"
            
            topics_text += "\n\n–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä."
            
            await update.message.reply_text(topics_text)
            context.user_data.pop('current_subject', None)
        else:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–º—ã. –§–æ—Ä–º–∞—Ç:\n"
                "1. –¢–µ–º–∞ 1\n"
                "2. –¢–µ–º–∞ 2\n"
                "..."
            )
            return WAITING_TOPICS_LIST
        
        return ConversationHandler.END

    async def set_subject_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return ConversationHandler.END
        
        if not self.topics:
            await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return ConversationHandler.END
        
        subjects_text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:\n\n"
        for i, subject in enumerate(self.topics.keys(), 1):
            start_time = self.start_times.get(subject)
            time_info = f" - {start_time.strftime('%d.%m.%Y %H:%M')}" if start_time else " - –≤—Ä–µ–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            subjects_text += f"{i}. {subject}{time_info}\n"
        
        subjects_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:"
        await update.message.reply_text(subjects_text)
        
        return WAITING_FOR_SUBJECT_TIME

    async def handle_subject_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        subject = None
        
        try:
            subject_num = int(text)
            subjects = list(self.topics.keys())
            if 1 <= subject_num <= len(subjects):
                subject = subjects[subject_num - 1]
        except ValueError:
            if text in self.topics:
                subject = text
        
        if not subject:
            await update.message.reply_text("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return WAITING_FOR_SUBJECT_TIME
        
        context.user_data['selected_subject'] = subject
        
        await update.message.reply_text(
            f"üìñ –í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject}\n\n"
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024"
        )
        return SETTING_DATE

    async def handle_set_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        subject = context.user_data.get('selected_subject')
        
        if not subject:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        date_pattern = r'^(\d{1,2})\.(\d{1,2})\.(\d{4})$'
        match = re.match(date_pattern, text)
        
        if not match:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
                "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return SETTING_DATE
        
        day, month, year = map(int, match.groups())
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
            selected_date = datetime.datetime(year, month, day)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ MSK
            now_msk = self.get_local_time()
            
            if selected_date.date() < now_msk.date():
                await update.message.reply_text(
                    "‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º!\n"
                    "‚úÖ –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É:\n"
                    "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì"
                )
                return SETTING_DATE
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
            context.user_data['selected_date'] = selected_date
            
            await update.message.reply_text(
                f"‚úÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {selected_date.strftime('%d.%m.%Y')}\n\n"
                "‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30"
            )
            return SETTING_TIME
            
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!\n"
                "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "- –î–µ–Ω—å –æ—Ç 1 –¥–æ 31\n"
                "- –ú–µ—Å—è—Ü –æ—Ç 1 –¥–æ 12\n"
                "- –ì–æ–¥ –æ—Ç 2024\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return SETTING_DATE

    async def handle_set_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        subject = context.user_data.get('selected_subject')
        selected_date = context.user_data.get('selected_date')
        
        if not subject or not selected_date:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_pattern = r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$'
        match = re.match(time_pattern, text)
        
        if not match:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n"
                "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return SETTING_TIME
        
        hours, minutes = map(int, match.groups())
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ MSK
            start_time = datetime.datetime.combine(selected_date, datetime.time(hours, minutes))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ MSK
            now_msk = self.get_local_time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
            if start_time <= now_msk:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º!\n"
                    "‚úÖ –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è:\n"
                    "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú"
                )
                return SETTING_TIME
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
            self.start_times[subject] = start_time
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å
            time_left = start_time - now_msk
            time_info = self.format_time_left(time_left)
            
            await update.message.reply_text(
                f"‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üìñ –ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                f"üìÖ –î–∞—Ç–∞: {start_time.strftime('%d.%m.%Y')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {start_time.strftime('%H:%M')}\n"
                f"‚è≥ –î–æ –Ω–∞—á–∞–ª–∞: {time_info}\n"
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞"
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('selected_subject', None)
            context.user_data.pop('selected_date', None)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        return ConversationHandler.END

    async def send_topics_update(self, subject, update: Update = None):
        try:
            topics_text = f"üìä –¢–µ–º—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}':\n\n"
            
            for num, topic in self.topics[subject].items():
                if subject in self.registrations and num in self.registrations[subject]:
                    user_id, username, timestamp = self.registrations[subject][num]
                    time_str = timestamp.strftime('%H:%M:%S')
                    topics_text += f"{num}. {topic} - ‚úÖ @{username} ({time_str})\n"
                else:
                    topics_text += f"{num}. {topic} - ‚ùå –°–≤–æ–±–æ–¥–Ω–∞\n"
            
            start_time = self.start_times.get(subject)
            if start_time:
                now = self.get_local_time()
                if now >= start_time:
                    topics_text += f"\n‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ê–ö–¢–ò–í–ù–û"
                else:
                    time_left = start_time - now
                    time_info = self.format_time_left(time_left)
                    topics_text += f"\n‚è∞ –ù–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑: {time_info}"
            
            if update:
                await update.message.reply_text(topics_text)
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–º: {e}")

    async def list_subjects(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.topics:
            await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return
        
        subjects_text = "üìö –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n\n"
        
        for subject in self.topics.keys():
            start_time = self.start_times.get(subject)
            if start_time:
                time_info = start_time.strftime('%d.%m.%Y %H:%M')
                now = self.get_local_time()
                
                if now >= start_time:
                    status = "‚úÖ –ê–ö–¢–ò–í–ù–û"
                else:
                    time_left = start_time - now
                    time_info_status = self.format_time_left(time_left)
                    status = f"‚è∞ –ß–µ—Ä–µ–∑ {time_info_status}"
            else:
                time_info = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                status = "‚ùå –í—Ä–µ–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ"
            
            topics_count = len(self.topics[subject])
            reg_count = len(self.registrations.get(subject, {}))
            
            subjects_text += f"üìñ {subject}\n"
            subjects_text += f"   ‚è∞ –í—Ä–µ–º—è: {time_info}\n"
            subjects_text += f"   üìä –¢–µ–º—ã: {topics_count}, –í—ã–±—Ä–∞–Ω–æ: {reg_count}\n"
            subjects_text += f"   üö¶ –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        await update.message.reply_text(subjects_text)

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    async def cancel_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return ConversationHandler.END
        
        if not self.topics:
            await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return ConversationHandler.END
        
        subjects_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:\n\n"
        for i, subject in enumerate(self.topics.keys(), 1):
            subjects_text += f"{i}. {subject}\n"
        
        subjects_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:"
        await update.message.reply_text(subjects_text)
        
        context.user_data['cancel_action'] = 'select_subject'
        return CANCELING_REGISTRATION

    async def handle_cancel_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        
        if context.user_data.get('cancel_action') == 'select_subject':
            try:
                subject_num = int(text)
                subjects = list(self.topics.keys())
                if 1 <= subject_num <= len(subjects):
                    subject = subjects[subject_num - 1]
                    context.user_data['selected_subject'] = subject
                    context.user_data['cancel_action'] = 'select_topic'
                    
                    if subject in self.registrations and self.registrations[subject]:
                        occupied_text = f"–ó–∞–Ω—è—Ç—ã–µ —Ç–µ–º—ã –¥–ª—è '{subject}':\n\n"
                        for topic_num, (user_id, username, timestamp) in self.registrations[subject].items():
                            topic_name = self.topics[subject][topic_num]
                            occupied_text += f"{topic_num}. {topic_name} - @{username}\n"
                        
                        occupied_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
                        await update.message.reply_text(occupied_text)
                    else:
                        await update.message.reply_text(f"–î–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject}' –Ω–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö —Ç–µ–º.")
                        return ConversationHandler.END
                else:
                    await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞.")
                    return CANCELING_REGISTRATION
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞.")
                return CANCELING_REGISTRATION
        
        elif context.user_data.get('cancel_action') == 'select_topic':
            try:
                topic_num = int(text)
                subject = context.user_data.get('selected_subject')
                
                if subject not in self.registrations or topic_num not in self.registrations[subject]:
                    await update.message.reply_text("–¢–µ–º–∞ –Ω–µ –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return CANCELING_REGISTRATION
                
                user_id, username, timestamp = self.registrations[subject].pop(topic_num)
                topic_name = self.topics[subject][topic_num]
                
                await update.message.reply_text(
                    f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:\n"
                    f"–¢–µ–º–∞: {topic_num}. {topic_name}\n"
                    f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}"
                )
                
                await self.send_topics_update(subject, update)
                context.user_data.pop('selected_subject', None)
                context.user_data.pop('cancel_action', None)
                
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã.")
                return CANCELING_REGISTRATION
        
        return ConversationHandler.END

    async def remove_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return ConversationHandler.END
        
        if not self.topics:
            await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return ConversationHandler.END
        
        subjects_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:\n\n"
        for i, subject in enumerate(self.topics.keys(), 1):
            subjects_text += f"{i}. {subject}\n"
        
        subjects_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:"
        await update.message.reply_text(subjects_text)
        
        return SELECTING_SUBJECT_FOR_REMOVAL

    async def handle_subject_selection_for_removal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        subject = None
        
        try:
            subject_num = int(text)
            subjects = list(self.topics.keys())
            if 1 <= subject_num <= len(subjects):
                subject = subjects[subject_num - 1]
        except ValueError:
            if text in self.topics:
                subject = text
        
        if not subject:
            await update.message.reply_text("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return SELECTING_SUBJECT_FOR_REMOVAL
        
        context.user_data['removal_subject'] = subject
        
        if subject in self.registrations and self.registrations[subject]:
            occupied_text = f"–ó–∞–Ω—è—Ç—ã–µ —Ç–µ–º—ã –¥–ª—è '{subject}':\n\n"
            for topic_num, (user_id, username, timestamp) in self.registrations[subject].items():
                topic_name = self.topics[subject][topic_num]
                occupied_text += f"{topic_num}. {topic_name} - @{username}\n"
            
            occupied_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
            await update.message.reply_text(occupied_text)
            return SELECTING_TOPIC_FOR_REMOVAL
        else:
            await update.message.reply_text(f"–î–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject}' –Ω–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö —Ç–µ–º.")
            context.user_data.pop('removal_subject', None)
            return ConversationHandler.END

    async def handle_topic_selection_for_removal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        subject = context.user_data.get('removal_subject')
        
        if not subject:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return ConversationHandler.END
        
        try:
            topic_num = int(text)
            
            if subject not in self.registrations or topic_num not in self.registrations[subject]:
                await update.message.reply_text("–¢–µ–º–∞ –Ω–µ –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return SELECTING_TOPIC_FOR_REMOVAL
            
            user_id, username, timestamp = self.registrations[subject].pop(topic_num)
            topic_name = self.topics[subject][topic_num]
            
            await update.message.reply_text(
                f"–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω:\n"
                f"–¢–µ–º–∞: {topic_num}. {topic_name}\n"
                f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}"
            )
            
            await self.send_topics_update(subject, update)
            
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã.")
            return SELECTING_TOPIC_FOR_REMOVAL
        finally:
            context.user_data.pop('removal_subject', None)
        
        return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        for key in ['current_subject', 'selected_subject', 'cancel_action', 'removal_subject', 'selected_date']:
            context.user_data.pop(key, None)
        
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    def is_distribution_started(self, subject):
        if subject not in self.start_times:
            return True
        now = self.get_local_time()
        return now >= self.start_times[subject]

    async def handle_topic_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip()
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name

        if text.isdigit():
            selected_subject = None
            for subject in self.topics.keys():
                if self.is_distribution_started(subject):
                    selected_subject = subject
                    break
            
            if not selected_subject:
                await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π.")
                return
            
            try:
                topic_number = int(text)
                topics = self.topics[selected_subject]
                
                if topic_number not in topics:
                    await update.message.reply_text("–¢–∞–∫–æ–π —Ç–µ–º—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return
                
                if selected_subject in self.registrations and topic_number in self.registrations[selected_subject]:
                    await update.message.reply_text("–≠—Ç–∞ —Ç–µ–º–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
                    return
                
                timestamp = self.get_local_time()
                if selected_subject not in self.registrations:
                    self.registrations[selected_subject] = {}
                self.registrations[selected_subject][topic_number] = (user_id, username, timestamp)
                
                await update.message.reply_text(
                    f"üéâ –¢–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞!\n"
                    f"üìñ {topic_number}. {topics[topic_number]}\n"
                    f"üìö {selected_subject}\n"
                    f"‚è∞ {timestamp.strftime('%H:%M:%S')}"
                )
                
                await self.send_topics_update(selected_subject, update)
                
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã.")

    async def view_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.topics:
            await update.message.reply_text("–¢–µ–º—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
            return
        
        for subject in self.topics.keys():
            await self.send_topics_update(subject, update)

    async def show_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not any(self.registrations.values()):
            await update.message.reply_text("–ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–ª —Ç–µ–º—ã.")
            return
        
        for subject, registrations in self.registrations.items():
            if registrations:
                sorted_registrations = sorted(registrations.items(), key=lambda x: x[1][2])
                
                results_text = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ '{subject}':\n\n"
                
                for topic_num, (user_id, username, timestamp) in sorted_registrations:
                    topic_name = self.topics[subject][topic_num]
                    time_str = timestamp.strftime('%H:%M:%S')
                    results_text += f"{topic_num}. {topic_name}\n   üë§ @{username} ({time_str})\n\n"
                
                await update.message.reply_text(results_text)

def main():
    TOKEN = os.environ.get('BOT_TOKEN', "8405347117:AAG7h0qxePyQ9mXW3z03DBYOEWafOVP3oBI")
    
    application = Application.builder().token(TOKEN).build()
    bot = SeminarBot()
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    new_subject_handler = ConversationHandler(
        entry_points=[CommandHandler("new_subject", bot.new_subject)],
        states={
            WAITING_SUBJECT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_subject_name)],
            WAITING_TOPICS_LIST: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_topics_list)],
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)]
    )
    
    # ConversationHandler –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    time_handler = ConversationHandler(
        entry_points=[CommandHandler("set_subject_time", bot.set_subject_time)],
        states={
            WAITING_FOR_SUBJECT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_subject_selection)],
            SETTING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_set_date)],
            SETTING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_set_time)],
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)]
    )
    
    # ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    admin_handler = ConversationHandler(
        entry_points=[
            CommandHandler("cancel_registration", bot.cancel_registration),
            CommandHandler("remove_user", bot.remove_user)
        ],
        states={
            CANCELING_REGISTRATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_cancel_registration)],
            SELECTING_SUBJECT_FOR_REMOVAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_subject_selection_for_removal)],
            SELECTING_TOPIC_FOR_REMOVAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_topic_selection_for_removal)]
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(new_subject_handler)
    application.add_handler(time_handler)
    application.add_handler(CommandHandler("view_topics", bot.view_topics))
    application.add_handler(CommandHandler("results", bot.show_results))
    application.add_handler(CommandHandler("list_subjects", bot.list_subjects))
    application.add_handler(admin_handler)
    application.add_handler(CommandHandler("cancel", bot.cancel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r'^\d+$'), 
        bot.handle_topic_selection
    ))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
